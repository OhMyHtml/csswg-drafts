<pre class='metadata'>
Title: CSS Box Model Module Level 4
Shortname: css-box
Level: 4
Status: ED
Work Status: Exploring
Group: csswg
ED: https://drafts.csswg.org/css-box-4/
TR: https://www.w3.org/TR/css-box-4/
Previous version: https://www.w3.org/TR/2020/WD-css-box-4-20200421/
Prepare for TR: no
Abstract: This specification describes the margin and padding properties, which create spacing in and around a CSS box. It may later be extended to include borders (currently described in [[css-backgrounds-3]]).
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Ignored Terms: internal table elements, block layout
</pre>
<pre class='link-defaults'>
spec:css-sizing-3; type:dfn; text:size
</pre>

Introduction {#intro}
============

	<p><em>This subsection is not normative.</em>

	<p>CSS describes how each element
	and each string of text in a source document
	is laid out by transforming the <a>document tree</a>
	into a set of <a>boxes</a>,
	whose size, position, and stacking level on the <a>canvas</a>
	depend on the values of their CSS properties.

	Note: <a href="https://www.w3.org/TR/css-cascade/">CSS Cascading and Inheritance</a>
	describes how properties are assigned to elements in the box tree,
	while [[css-display-3#intro]] describes how the <a>document tree</a>
	is transformed into the <a>box tree</a>.

	<p>Each CSS <a>box</a>
	has a rectangular content area,
	a band of padding around the content,
	a border around the padding,
	and a margin outside the border.
	The <a>sizing properties</a> [[css-sizing-3]],
	together with various other properties that control layout,
	define the size of the content area.
	The box styling properties--
	'padding' and its longhands,
	'border' and its longhands,
	and 'margin' and its longhands--
	define the sizes of these other areas.
	Margins and padding are defined in this module;
	borders are defined in [[css-backgrounds-3]].

	Note: This module <a href="https://www.w3.org/TR/2018/WD-css3-box-20180731/">originally contained</a>
	the CSS Level 3 specification prose relating to
	box generation (now defined in [[css-display-3]]),
	the box model (defined here),
	as well as block layout (now only defined in [[CSS2]] Chapters 9 and 10).
	Since its maintenance was put aside during the development of CSS2.1,
	its prose was severely outdated by the time CSS2 Revision 1
	was finally completed.
	Therefore, the block layout portion of the prose has been retired,
	to be re-synched to <a href="https://www.w3.org/TR/CSS2">CSS2</a> and updated
	as input to a new Block Layout module at some point in the future.
	It is being split apart from this module
	and from the <a href="https://www.w3.org/TR/css-display/">CSS Display Module</a>
	both because of the practical concern that it would be a huge amount of work
	and also in recognition that CSS now has multiple layout models
	(<a href="https://www.w3.org/TR/css-flexbox/">Flex Layout</a>,
	<a href="https://www.w3.org/TR/css-grid/">Grid Layout</a>,
	<a href="https://www.w3.org/TR/css-position/">Positioned Layout</a>,
	and <a href="https://www.w3.org/TR/css-tables/">Table Layout</a>,
	in addition to Block Layout)
	which each deserve their own parallel module.

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.

<h3 id="placement">
Module Interactions</h3>

	<p>This module replaces the definitions of the margin and padding properties
	defined in [[!CSS2]] sections 8.1, 8.2, 8.3 (but not 8.3.1), and 8.4.

	<p>All properties in this module apply to the
	''::first-line'' and ''::first-letter'' pseudo-elements.

The CSS Box Model {#box-model}
=================

	<p export>每个盒子具有一个 <dfn>content area</dfn>，
	（包含了它的内容，包括文本、后代盒子、图片或其他 <a>replaced element</a> 内容等等。）
	可选地被
	<dfn lt="padding area">padding</dfn>、
	<dfn lt="border area">border</dfn>、
	和<dfn lt="margin area">margin areas</dfn>所包围。
	每个区域的尺寸由对应的属性所给定，可以为0。特别地，margin可为负值。
	下图展示了这些区域的关系，并指出了标识各区域的术语：

	<div class="figure">
		<p><img src="images/box.png" alt="Diagram of a typical box, showing the
		content, padding, border and margin areas">

		<p class="caption">The various areas and edges of a typical box.
	</div>

	margin、border以及padding可被拆分为上右下左四段，每段都可被对应属性单独控制。

	四个区域(content, padding, border, and margin)的边界被叫做
	<dfn export lt="box edge" local-lt="edge">edge</dfn>，
	每个 [=edge=] 可被分为上右下左四边。
	因此每个 <a>box</a> 具有四个由下列边所组成的 [=edges=]：

	<dl export>
		<dt><dfn>content edge</dfn> or <dfn>inner edge</dfn>
		<dd>
			内容边缘围绕着一个由宽和高所给定的矩形，通常依赖于元素的内容，
			或是<a>containing block</a>尺寸。
			<a>content edge</a>的四边构成了盒子的<dfn>content box</dfn>。

		<dt><dfn>padding edge</dfn>
		<dd>
			填充边缘围绕着盒子的填充。
			若某一边的填充宽度给了0，那么在那一边的填充边缘将和内容边缘相同。
			<a>padding edge</a> 的四边构成了盒子的 <dfn>padding box</dfn>，
			同时它也包括了<a lt="content area">content area</a>
			和<a>padding area</a>。

		<dt><dfn>border edge</dfn>
		<dd>
			边框边缘围绕着盒子的边框。
			若某一边的边框宽度给了0，那么在那一边的边框边缘将和填充边缘相同。
			<a>border edge</a> 的四边构成了盒子的 <dfn>border box</dfn>，
			同时它也包括了<a lt="content area">content area</a>、
			<a>padding area</a>和<a>border areas</a>。

		<dt><dfn>margin edge</dfn> or <dfn>outer edge</dfn>
		<dd>
			留白边缘围绕着盒子的留白。
			若某一边的留白宽度给了0，那么在那一边的留白边缘将和边框边缘相同。
			<a>margin edge</a> 的四边构成了盒子的 <dfn>margin box</dfn>，
			同时它也包括了<a lt="content area">content area</a>、
			<a>padding area</a>、<a>border areas</a>和<a>margin areas</a>。
	</dl>

	盒子背景的内容、填充和边框区域是由它的 'background' 属性所给定的。
	边框区域能够使用 'border' 来额外地加上一些边框样式。
	留白总是透明的。
	请参阅 [[css-backgrounds-3]]。

	当一个盒子 <a href="https://www.w3.org/TR/css-break-3/#fragmentation-model">fragments</a> 由于跨行或跨页，
	被破坏了而分成了<a>box fragments</a>，那么每个盒子的（(<a>content box</a>、<a>padding box</a>、<a>border box</a>、<a>margin box</a>)）
	也会被碎片化。
	content/padding/border/margin 区域对于碎片所做的一些处理在 [[css-break-3]] 中有定义，且由 'box-decoration-break' 属性控制。

盒子边缘关键字 {#keywords}
-----------------

	下列CSS关键字被定义用在一些需要引用不同的盒子边缘的属性
	（例如 'transform-box' 、'background-clip' ）：

	<dl dfn-for="<box>,<shape-box>,<geometry-box>" dfn-type=value>
		<dt><dfn>content-box</dfn>
			<dd>
				引用了[=content box=] 或 [=content edge=]。
				（SVG 上下文中，被作为 ''<box>/fill-box''。）

		<dt><dfn>padding-box</dfn>
			<dd>
				引用了[=padding box=] 或 [=padding edge=]。
				（SVG 上下文中，被作为 ''<box>/fill-box''。）

		<dt><dfn>border-box</dfn>
			<dd>
				引用了[=border box=] 或 [=border edge=]。
				（SVG 上下文中，被作为 ''<box>/stroke-box''。）

		<dt><dfn>margin-box</dfn>
			<dd>
				引用了[=margin box=] 或 [=margin edge=]。
				（SVG 上下文中，被作为 ''<box>/stroke-box''。）

		<dt><dfn>fill-box</dfn>
			<dd>
				引用了[=object bounding box=] 或它的边缘。
				（CSS 盒子上下文中，被作为 ''<box>/content-box''。）

		<dt><dfn>stroke-box</dfn>
			<dd>
				引用了[=stroke bounding box=] 或它的边缘。
				（CSS 盒子上下文中，被作为 ''<box>/border-box''。）

		<dt><dfn>view-box</dfn>
			<dd>
				Refers to the nearest [=SVG viewport=]’s
				<dfn dfn lt="SVG viewport origin box" local-lt="origin box">origin box</dfn>,
				which is a rectangle with the width and height
				of the [=SVG viewport=],
				positioned such that its top left corner is anchored
				at the coordinate system origin.
				(In a CSS box context, treated as ''<box>/border-box''.)

				Note: When the [=SVG viewport=]
				is not itself anchored at the origin,
				this [=origin box=] does not actually correspond
				to the [=SVG viewport=]!
				<!-- This is a legacy compat requirement.
				     See https://github.com/w3c/csswg-drafts/issues/4662 -->
	</dl>

	方便起见定义了下列值类型：
	<pre class="prod">
		<dfn><<visual-box>></dfn> = content-box | padding-box | border-box
		<dfn><<layout-box>></dfn> = content-box | padding-box | border-box | margin-box
		<dfn><<paint-box>></dfn> = content-box | padding-box | border-box | fill-box | stroke-box
		<dfn><<coord-box>></dfn> = content-box | padding-box | border-box | fill-box | stroke-box | view-box
	</pre>

Margins {#margins}
=======

	<dfn export lt="margin">Margins</dfn> 围绕着盒子的边框边缘，在两个盒子之间提供了空隙。
 	<dfn export>margin properties</dfn> 指定了盒子 <a>margin area</a> 的厚度。
	The 'margin' <a>shorthand property</a>
	sets the margin for all four sides
	while the margin <a>longhand properties</a> only set their respective side.
	规范定义了 <a>physical</a> 'margin' <a>longhands</a>；
	同时也额外定义了<a>flow-relative</a> 'margin' <a>longhands</a>：[[css-logical-1#margin-properties]]。
	两组属性控制同一组留白：
	它们只是索引每条边的不同方法。

	Note: 在<a>block layout</a>中相邻留白<em>collapse</em>。
	请参阅 <a href="https://www.w3.org/TR/CSS2/box.html#collapsing-margins">CSS2&sect;8.3.1 Collapsing Margins</a>
	以查看详情。
	同样，与<a>fragmentation break</a>相邻的留白有时也会被截断。
	请参阅[[css-break-3#break-margins]] 以查看详情。

Page-relative (Physical) Margin Properties: the 'margin-top', 'margin-right', 'margin-bottom', and 'margin-left' properties {#margin-physical}
-------------------------------------------

	<pre class="propdef">
		Name: margin-top, margin-right, margin-bottom, margin-left
		Value: <<length-percentage>> | auto
		Initial: 0
		Applies to: all elements except <a>internal table elements</a>, [=ruby base containers=], and [=ruby annotation containers=]
		Inherited: no
		Percentages: refer to <a>logical width</a> of containing block
		Computed value: the keyword ''margin/auto'' or a computed <<length-percentage>> value
		Animation type: by computed value type
	</pre>

	These properties set the top, right, bottom, and left
	<a>margin</a> of a <a>box</a>, respectively.

	允许为为留白属性设为负值，
	但可能会存在实现特定的限制。

Margin Shorthand: the 'margin' property {#margin-shorthand}
-----------------

	<pre class="propdef">
		Name: margin
		Value: <<'margin-top'>>{1,4}
		Initial: 0
		Applies to: all elements except <a>internal table elements</a>, [=ruby base containers=], and [=ruby annotation containers=]
		Inherited: no
		Percentages: refer to <a>logical width</a> of containing block
		Computed value: see individual properties
		Animation type: by computed value type
	</pre>

	The 'margin' property is a shorthand property for setting
	'margin-top', 'margin-right', 'margin-bottom', and 'margin-left'
	in a single declaration.

	If there is only one component value,
	it applies to all sides.
	If there are two values,
	the top and bottom margins are set to the first value
	and the right and left margins are set to the second.
	If there are three values,
	the top is set to the first value,
	the left and right are set to the second,
	and the bottom is set to the third.
	If there are four values
	they apply to the top, right, bottom, and left, respectively.

	<div class="example">
		The following code demonstrates some possible 'margin' declarations.

		<pre>
			body { margin: 2em }         /* all margins set to 2em */
			body { margin: 1em 2em }     /* top & bottom = 1em, right & left = 2em */
			body { margin: 1em 2em 3em } /* top=1em, right=2em, bottom=3em, left=2em */
		</pre>

		The last rule of the example above is equivalent to the example below:
		<pre>
			body {
			  margin-top: 1em;
			  margin-right: 2em;
			  margin-bottom: 3em;
			  margin-left: 2em; /* copied from opposite side (right) */
			}
		</pre>
	</div>

Margins at Container Edges: the 'margin-trim' property {#margin-trim}
--------------------------

	<pre class="propdef">
		Name: margin-trim
		Value: none | in-flow | all
		Initial: none
		Applies to: [=block containers=], [=multi-column containers=]
		Inherited: no
		Percentages: N/A
		Computed value: keyword as specified
		Animation type: discrete
	</pre>

	通常，兄弟元素之间会需要留白，但容器开始或结束的地方不需要。那里空间可以通过填充来控制。
	该属性使得容器能够裁剪它和与它边缘相邻的子元素的留白。
	包括下列可选值：

	<dl dfn-type=value dfn-for=margin-trim>
		<dt><dfn>none</dfn>
		<dd>
			Margins are not trimmed by the container.

			Note: However, in block layout,
			child margins can collapse with their parent.
			See <a href="https://www.w3.org/TR/CSS2/box.html#collapsing-margins">CSS2&sect;8.3.1: Collapsing Margins</a>.

		<dt><dfn>in-flow</dfn>
		<dd>
			For in-flow boxes contained by this box,
			block-axis margins adjacent to the box’s edges
			are truncated to zero.
			It also truncates any margins collapsed with such a margin.

		<dt><dfn>all</dfn>
		<dd>
			Trims the margins of in-flow boxes as for ''in-flow'',
			but also trims any float margin
			whose [=margin edge=] coincides
			with the container’s [=content edge=].
	</dl>

	Specifically, for [=block containers=],
	''margin-trim: in-flow'' or ''margin-trim: all'' discards:
	<ul>
		<li>The block-start margin of a block-level first child.
		<li>The block-end margin of a block-level last child.
		<li>Any margin collapsed with these margins.
	</ul>

	''margin-trim: all'' also affects floats
	for which the [=block container=] is a [=containing block=] by:
	<ul>
		<li>
			Discarding the [=block-start=] [=margin=] of any float
			whose [=block-start=] [=outer edge=] coincides
			with the [=block-start=] [=inner edge=] of the container.
		<li>
			Discarding the [=inline-start=]/[=inline-end=] [=margin=]
			of an [=inline-start=]/[=inline-end=] float (or equivalent)
			whose [=outer edge=] on that side coincides
			with the [=inner edge=] of the container.
		<li>
			Zeroing the [=inline-axis=] margins of a float
			for the purpose of calculating its [=intrinsic size contributions=]
			or its [=size=] in the container’s [=inline axis=].
		<li>
			Trimming the [=block-end=] margins of a float
			to the extent necessary to prevent such a margin
			from extending the [=block size=]
			of a [=block formatting context root=].
	</ul>

	ISSUE: Should this property apply to [=flex containers=] or [=grid containers=]?

	ISSUE: Should floats have a <css>floats</css> value that only affects floats?

	Note: See also the 'margin-break' property,
	which applies to the box’s own margins
	when they adjoin a <a>fragmentation break</a>
	(page break / column break / etc.).

	ISSUE: Define how this property affects margins at breaks
	if the box establishes a <a>fragmentation context</a>.
	See also <a href="https://github.com/w3c/csswg-drafts/issues/3314">Issue 3314</a>.

Padding {#paddings}
=======
	<dfn export>Padding</dfn>被插入在盒子的内容边缘到填充边缘之间，
	为内容与边框之间提供了空间。
	<dfn export>padding properties</dfn>指定了盒子中<a>padding area</a>的厚度。
	The 'padding' <a>shorthand property</a>
	sets the padding for all four sides
	while the padding <a>longhand properties</a> only set their respective side.
	本规范定义了 <a>physical</a> 'padding' <a>longhands</a>;
	同时也额外定义了<a>flow-relative</a> 'padding' <a>longhands</a>：[[css-logical-1#padding-properties]]。
	Both sets of properties control the same set of padding:
	they are just different ways of indexing each side.

	Note: 在盒子上指定的背景默认在填充边缘内进行绘制与布局
	（它们也在<a>border area</a>内、边框下面被绘制。）
	这里的绘制操作可以通过使用 'background-origin' 、 'background-clip'属性来调整。

Page-relative (Physical) Padding Properties: the 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' properties {#padding-physical}
-------------------------------------------

	<pre class="propdef">
		Name: padding-top, padding-right, padding-bottom, padding-left
		Value: <<length-percentage>>
		Initial: 0
		Applies to: all elements except: <a>internal table elements</a> other than table cells, [=ruby base containers=], and [=ruby annotation containers=]
		Inherited: no
		Percentages: refer to <a>logical width</a> of containing block
		Computed value: a computed <<length-percentage>> value
		Animation type: by computed value type
	</pre>

	These properties set the top, right, bottom, and left
	<a>padding</a> of a <a>box</a>, respectively.

	Negative values for padding properties are invalid.

Padding Shorthand: the 'padding' property {#padding-shorthand}
-----------------

	<pre class="propdef">
		Name: padding
		Value: <<'padding-top'>>{1,4}
		Initial: 0
		Applies to: all elements except: <a>internal table elements</a> other than table cells, [=ruby base containers=], and [=ruby annotation containers=]
		Inherited: no
		Percentages: refer to <a>logical width</a> of containing block
		Computed value: see individual properties
		Animation type: by computed value type
	</pre>

	The 'padding' property is a shorthand property for setting
	'padding-top', 'padding-right', 'padding-bottom', and 'padding-left'
	in a single declaration.

	If there is only one component value,
	it applies to all sides.
	If there are two values,
	the top and bottom padding are set to the first value
	and the right and left padding are set to the second.
	If there are three values,
	the top is set to the first value,
	the left and right are set to the second,
	and the bottom is set to the third.

	<div class="example">
		The following code demonstrates some possible 'padding' declarations.

		<pre>
			body { padding: 2em }         /* all padding set to 2em */
			body { padding: 1em 2em }     /* top & bottom = 1em, right & left = 2em */
			body { padding: 1em 2em 3em } /* top=1em, right=2em, bottom=3em, left=2em */
		</pre>

		The last rule of the example above is equivalent to the example below:
		<pre>
			body {
			  padding-top: 1em;
			  padding-right: 2em;
			  padding-bottom: 3em;
			  padding-left: 2em; /* copied from opposite side (right) */
			}
		</pre>
	</div>

Borders {#borders}
=======

	<dfn export lt="border">Borders</dfn> 填充了 <a>border area</a>，
	用以可视化地描绘出盒子的边缘。
	<dfn export>border properties</dfn> 指定了盒子 <a>border area</a> 的厚度
	以及绘图样式与颜色。
	请参阅 [[css-backgrounds-3#borders]] 来了解这些属性physical variants的定义。
	[[css-logical-1#border-properties]] 额外地定义了
	<a>flow-relative</a> 边框 <a>longhands</a>。

Changes Since CSS Level 3 {#changes-since-3}
=========================

	The following changes have been made to this module
	since <a href="https://www.w3.org/TR/css-box-3/">Level 3</a>:
	<ul>
		<li>Adding the 'margin-trim' property.
	</ul>

Changes Since CSS Level 2 {#changes-since-2}
=========================

	The following changes have been made to this module
	since <a href="https://www.w3.org/TR/CSS2/box.html">Level 2</a>:
	<ul>
		<li>Adapting the prose slightly to account for vertical <a>writing modes</a>.
		<li>Defining the applicability of 'margin', 'padding' and their longhands to [=ruby base containers=] and [=ruby annotation containers=]
	</ul>

Privacy and Security Considerations {#priv-sec}
===============================================

	Box Model introduces no new privacy leaks,
	or security considerations beyond "implement it correctly".
